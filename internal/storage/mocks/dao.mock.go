// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go

// Package daomocks is a generated GoMock package.
package daomocks

import (
	context "context"
	reflect "reflect"
	time "time"

	task "github.com/ecodeclub/ecron/internal/task"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// PreemptTask mocks base method.
func (m *MockTaskRepository) PreemptTask(ctx context.Context, tid int64, oldOwner, newOwner string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreemptTask", ctx, tid, oldOwner, newOwner)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreemptTask indicates an expected call of PreemptTask.
func (mr *MockTaskRepositoryMockRecorder) PreemptTask(ctx, tid, oldOwner, newOwner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreemptTask", reflect.TypeOf((*MockTaskRepository)(nil).PreemptTask), ctx, tid, oldOwner, newOwner)
}

// RefreshTask mocks base method.
func (m *MockTaskRepository) RefreshTask(ctx context.Context, tid int64, owner string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTask", ctx, tid, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshTask indicates an expected call of RefreshTask.
func (mr *MockTaskRepositoryMockRecorder) RefreshTask(ctx, tid, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTask", reflect.TypeOf((*MockTaskRepository)(nil).RefreshTask), ctx, tid, owner)
}

// ReleaseTask mocks base method.
func (m *MockTaskRepository) ReleaseTask(ctx context.Context, tid int64, owner string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseTask", ctx, tid, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseTask indicates an expected call of ReleaseTask.
func (mr *MockTaskRepositoryMockRecorder) ReleaseTask(ctx, tid, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseTask", reflect.TypeOf((*MockTaskRepository)(nil).ReleaseTask), ctx, tid, owner)
}

// TryPreempt mocks base method.
func (m *MockTaskRepository) TryPreempt(ctx context.Context, f func(context.Context, []task.Task) (task.Task, error)) (task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryPreempt", ctx, f)
	ret0, _ := ret[0].(task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryPreempt indicates an expected call of TryPreempt.
func (mr *MockTaskRepositoryMockRecorder) TryPreempt(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryPreempt", reflect.TypeOf((*MockTaskRepository)(nil).TryPreempt), ctx, f)
}

// MockTaskCfgRepository is a mock of TaskCfgRepository interface.
type MockTaskCfgRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskCfgRepositoryMockRecorder
}

// MockTaskCfgRepositoryMockRecorder is the mock recorder for MockTaskCfgRepository.
type MockTaskCfgRepositoryMockRecorder struct {
	mock *MockTaskCfgRepository
}

// NewMockTaskCfgRepository creates a new mock instance.
func NewMockTaskCfgRepository(ctrl *gomock.Controller) *MockTaskCfgRepository {
	mock := &MockTaskCfgRepository{ctrl: ctrl}
	mock.recorder = &MockTaskCfgRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskCfgRepository) EXPECT() *MockTaskCfgRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTaskCfgRepository) Add(ctx context.Context, t task.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTaskCfgRepositoryMockRecorder) Add(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTaskCfgRepository)(nil).Add), ctx, t)
}

// Stop mocks base method.
func (m *MockTaskCfgRepository) Stop(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockTaskCfgRepositoryMockRecorder) Stop(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTaskCfgRepository)(nil).Stop), ctx, id)
}

// UpdateNextTime mocks base method.
func (m *MockTaskCfgRepository) UpdateNextTime(ctx context.Context, id int64, next time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNextTime", ctx, id, next)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNextTime indicates an expected call of UpdateNextTime.
func (mr *MockTaskCfgRepositoryMockRecorder) UpdateNextTime(ctx, id, next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNextTime", reflect.TypeOf((*MockTaskCfgRepository)(nil).UpdateNextTime), ctx, id, next)
}

// MockExecutionDAO is a mock of ExecutionDAO interface.
type MockExecutionDAO struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionDAOMockRecorder
}

// MockExecutionDAOMockRecorder is the mock recorder for MockExecutionDAO.
type MockExecutionDAOMockRecorder struct {
	mock *MockExecutionDAO
}

// NewMockExecutionDAO creates a new mock instance.
func NewMockExecutionDAO(ctrl *gomock.Controller) *MockExecutionDAO {
	mock := &MockExecutionDAO{ctrl: ctrl}
	mock.recorder = &MockExecutionDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutionDAO) EXPECT() *MockExecutionDAOMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockExecutionDAO) Upsert(ctx context.Context, id int64, status task.ExecStatus, progress uint8) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, id, status, progress)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert.
func (mr *MockExecutionDAOMockRecorder) Upsert(ctx, id, status, progress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockExecutionDAO)(nil).Upsert), ctx, id, status, progress)
}
