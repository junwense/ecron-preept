// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go

// Package preemptmocks is a generated GoMock package.
package preemptmocks

import (
	context "context"
	reflect "reflect"

	preempt "github.com/ecodeclub/ecron/internal/preempt"
	task "github.com/ecodeclub/ecron/internal/task"
	gomock "go.uber.org/mock/gomock"
)

// MockPreempter is a mock of Preempter interface.
type MockPreempter struct {
	ctrl     *gomock.Controller
	recorder *MockPreempterMockRecorder
}

// MockPreempterMockRecorder is the mock recorder for MockPreempter.
type MockPreempterMockRecorder struct {
	mock *MockPreempter
}

// NewMockPreempter creates a new mock instance.
func NewMockPreempter(ctrl *gomock.Controller) *MockPreempter {
	mock := &MockPreempter{ctrl: ctrl}
	mock.recorder = &MockPreempterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPreempter) EXPECT() *MockPreempterMockRecorder {
	return m.recorder
}

// AutoRefresh mocks base method.
func (m *MockPreempter) AutoRefresh(ctx context.Context, t task.Task) <-chan preempt.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoRefresh", ctx, t)
	ret0, _ := ret[0].(<-chan preempt.Status)
	return ret0
}

// AutoRefresh indicates an expected call of AutoRefresh.
func (mr *MockPreempterMockRecorder) AutoRefresh(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoRefresh", reflect.TypeOf((*MockPreempter)(nil).AutoRefresh), ctx, t)
}

// Preempt mocks base method.
func (m *MockPreempter) Preempt(ctx context.Context) (task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Preempt", ctx)
	ret0, _ := ret[0].(task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Preempt indicates an expected call of Preempt.
func (mr *MockPreempterMockRecorder) Preempt(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preempt", reflect.TypeOf((*MockPreempter)(nil).Preempt), ctx)
}

// Refresh mocks base method.
func (m *MockPreempter) Refresh(ctx context.Context, t task.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockPreempterMockRecorder) Refresh(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockPreempter)(nil).Refresh), ctx, t)
}

// Release mocks base method.
func (m *MockPreempter) Release(ctx context.Context, t task.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockPreempterMockRecorder) Release(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockPreempter)(nil).Release), ctx, t)
}

// MockStatus is a mock of Status interface.
type MockStatus struct {
	ctrl     *gomock.Controller
	recorder *MockStatusMockRecorder
}

// MockStatusMockRecorder is the mock recorder for MockStatus.
type MockStatusMockRecorder struct {
	mock *MockStatus
}

// NewMockStatus creates a new mock instance.
func NewMockStatus(ctrl *gomock.Controller) *MockStatus {
	mock := &MockStatus{ctrl: ctrl}
	mock.recorder = &MockStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatus) EXPECT() *MockStatusMockRecorder {
	return m.recorder
}

// Err mocks base method.
func (m *MockStatus) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockStatusMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockStatus)(nil).Err))
}
